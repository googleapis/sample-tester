# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

type: test/samples
schema_version: 1
test:
  # For this test, suite names should contain the strings "Passing" or
  # "Failing" so the text fixture knows what to expect.
  #
  # The test case  # names should be just "yaml" or "code".  
  suites:
  - name: Passing directives test
    cases:
    - name: "code"
      spec:
      - code: |
          _, out = shell('/bin/echo', '"It was the bEsT of times"')
          assert_success("echo should have succeeded")
          assert_contains("BeSt")
          assert_excludes("wOrSt")
          assert_not_contains("wOrSt")
          assert_contains_any('commonest', 'best', 'worst')
          assert_excludes_any('best', 'worst')
          assert_that('ime' in out, 'expected "ime" in the preceding output')
          expect('ime' in out, 'expected "ime" in the preceding output')
          assert_that('ime' in _last_call_output, 'expected "ime" in the preceding output')

          call('output', 'Greetings')
          assert_success("call should have succeeded")
          assert_contains("ree")
          assert_excludes("farewell")
          assert_not_contains("farewell")
          assert_that('eti' in _last_call_output, 'expected "eti" in the preceding output')

          shell('/nonexistent/dir/foobar')
          assert_failure("foobar call should have failed")
          
          call_may_fail('wibble')
          assert_failure("wibble call should have failed")
          
          homedir = env('HOME')
          log('homedir: {}'.format(homedir))
          my_uuid = uuid()
          log('uuid: {}'.format(my_uuid))
    - name: "yaml"
      spec:
      - shell:
          - "/bin/echo"
          - "It was the beSt of times"
      - assert_success:
        - "echo should have succeeded"
      - assert_contains:
        - message: "Expected 'bEsT' to match"
        - literal: "bEsT"
      - assert_excludes:
        - message: "Expected no 'worst'"            
        - literal: "wOrSt"
      - assert_not_contains:
        - message: "Expected no 'worst'"            
        - literal: "wOrSt"
      - assert_contains_any:
        - literal: 'commonest'
        - literal: 'best'
        - literal: 'worst'
      - assert_excludes_any:
        - literal: 'best'
        - literal: 'worst'
      - call:
          sample: 'output'
          args:
            - literal: "Greetings"
      - assert_success:
        - "call should have succeeded"
      - assert_contains:
          - message: "should contain ree"
          - literal: "ree"
      - assert_excludes:
          - message: "should not contain farewell"
          - literal: "farewell"
      - assert_not_contains:
          - message: "should not contain farewell"
          - literal: "farewell"

      - shell:
          - "/nonexistent/dir/foobar"
      - assert_failure:
        - message: "foobar call should have failed"
        
      - call_may_fail:
          sample: 'wibble'
      - assert_failure:
        - message: "wibble call should have failed"
        
      - env:
          name: HOME
          variable: homedir
          what: HOME
          var: homedir

      - log:
        - "homedir: {}"
        - homedir
        
      - uuid: my_uuid
      - log:
        - "uuid: {}"
        - my_uuid
  - name: Failing, erroring env
    cases:
    - name: code
      spec:
      - code: homedir = env('FOOLALA')      
    - name: yaml
      spec:
      - env:
          name: FOOLALA
          variable: homedir
  - name: Failing call
    cases:
    - name: code
      spec:
      - code: out=call('wibble')
    - name: yaml
      spec:
      - call:
          sample: 'wibble'
  - name: Failing assert_success
    cases:
    - name: code
      spec:
      - code: |
          out = call_may_fail('wibble')
          assert_success('claim this passes')
    - name: yaml
      spec:
      - code: out = call_may_fail('wibble')
      - assert_success:
        - "claim this passes"
  - name: Failing assert_failure
    cases:
    - name: code
      spec:
      - code: |
          out = call_may_fail('output', 'Hello')
          assert_failure('claim this fails')
    - name: yaml
      spec:
      - code: out = call_may_fail('output', 'Hello')
      - assert_failure:
        - "claim this fails"
  - name: Failing assert_contains, one arg
    cases:
    - name: code
      spec:
      - code: |
          out = call('output', 'It was the best of times')
          assert_contains('worst', message='claim this is in there vmessage')
    - name: yaml
      spec:
      - code: out = call('output', 'It was the best of times')
      - assert_contains:
        - message: "claim this is in there wmsg"
        - literal: "worst"
  - name: Failing assert_contains, multiple args
    cases:
    - name: code
      spec:
      - code: |
          out = call('output', 'It was the best of times')
          assert_contains('best', 'of', 'all', message='claim this is in there')
    - name: yaml
      spec:
      - code: out = call('output', 'It was the best of times')
      - assert_contains:
        - message: "claim this is in there"
        - literal: "best"
        - literal: "of"
        - literal: "all"
  - name: Passing assert_contains_any
    cases:
    - name: code
      spec:
      - code: |
          out = call('output', 'It was the best of times')
          assert_contains_any('worst', 'time', 'ever', message='claim this is in there')
    - name: yaml
      spec:
      - code: out = call('output', 'It was the best of times')
      - assert_contains_any:
        - message: "claim this is in there"
        - literal: "worst"
        - literal: "time"
        - literal: "ever"
  - name: Failing assert_contains_any
    cases:
    - name: code
      spec:
      - code: |
          out = call('output', 'It was the best of times')
          assert_contains_any('worst', 'epoch', 'ever', message='claim this is in there')
    - name: yaml
      spec:
      - code: out = call('output', 'It was the best of times')
      - assert_contains_any:
        - message: "claim this is in there"
        - literal: "worst"
        - literal: "epoch"
        - literal: "ever"
  - name: Failing assert_excludes, one arg
    cases:
    - name: code
      spec:
      - code: |
          out = call('output', 'It was the best of times')
          assert_excludes('best', message='claim this is not in there')
    - name: yaml
      spec:
      - code: out = call('output', 'It was the best of times')
      - assert_excludes:
        - message: "claim this is not in there"
        - literal: "best"
  - name: Passing assert_excludes, multiple args
    cases:
    - name: code
      spec:
      - code: |
          out = call('output', 'It was the best of times')
          assert_excludes('worst', 'epoch', 'ever', message='claim this is not in there')
    - name: yaml
      spec:
      - code: out = call('output', 'It was the best of times')
      - assert_excludes:
        - message: "claim this is not in there"
        - literal: "worst"
        - literal: "epoch"
        - literal: "ever"
  - name: Failing assert_excludes, multiple args
    cases:
    - name: code
      spec:
      - code: |
          out = call('output', 'It was the best of times')
          assert_excludes('worst', 'time', 'ever', message='claim this is not in there') # 'time' causes this to fail
    - name: yaml
      spec:
      - code: out = call('output', 'It was the best of times')
      - assert_excludes:
        - message: "claim this is not in there"
        - literal: "worst"
        - literal: "time" # causes this to fail
        - literal: "ever"
  - name: Failing assert_excludes_any
    cases:
    - name: code
      spec:
      - code: |
          out = call('output', 'It was the best of times')
          assert_excludes_any('best', 'of', 'times', message='claim this is not in there')
    - name: yaml
      spec:
      - code: out = call('output', 'It was the best of times')
      - assert_excludes_any:
        - message: "claim this is not in there"
        - literal: "best"
        - literal: "of"
        - literal: "times"
  - name: Passing assert_excludes_any
    cases:
    - name: code
      spec:
      - code: |
          out = call('output', 'It was the best of times')
          assert_excludes_any('best', 'of', 'epochs', message='claim this is not in there')
    - name: yaml
      spec:
      - code: out = call('output', 'It was the best of times')
      - assert_excludes_any:
        - message: "claim this is not in there"
        - literal: "best"
        - literal: "of"
        - literal: "epochs"
  - name: Failing test when failing assertion stops test case from running next segment (should not error)
    setup:
    - code: |
        executed_after_failure = False
    teardown:
    - code: |
        if executed_after_failure:
          pass
          raise Exception('a test case segment was executed after a previous segment failed')
    cases:
    - name: code
      spec:
      - code: |
          abort()
      - code: |
          executed_after_failure = True # in a later segment than the abort()
    - name: yaml
      spec:
      - code: out = call('output', 'It was the best of times')
      - assert_excludes:
        - message: "claim this is not in there"
        - literal: "best"
      - code: |
          executed_after_failure = True
  - name: Failing test when failure stops test case segment from continuing (should not error)
    # This error-handling mode is specific to "code" specs.
    setup:
    - code: |
        executed_after_failure = False
    teardown:
    - code: |
        if executed_after_failure:
          pass
          raise Exception('a test case segment was executed after a previous failure')
    cases:
    - name: code
      spec:
      - code: |
          abort()
          executed_after_failure = True # in the same segment as the abort()
    - name: yaml # same as in the previous test suite
      spec:
      - code: out = call('output', 'It was the best of times')
      - assert_excludes:
        - message: "claim this is not in there"
        - literal: "best"
      - code: |
          executed_after_failure = True
  - name: Passing extract_match (single captured variable)
    cases:
    - name: "code"
      spec:
      - code: |
          shell('/bin/echo', '"It was the best of times"')
          extract_match('It was the best of (.*)', 'the_best_of')
          shell('/bin/echo', 'Captured: {}'.format(the_best_of))
          assert_contains('Captured: times')
    - name: "yaml"
      spec:
      - shell:
        - /bin/echo "It was the best of times"
      - extract_match:
          pattern: "It was the best of (.*)"
          variable: the_best_of
      - shell:
        - /bin/echo
        - "Captured:"
        - the_best_of
      - assert_contains:
        - literal: "Captured: times"
  - name: Passing extract_match (multiple captured group variables)
    cases:
    - name: "code"
      spec:
      - code: |
          shell('/bin/echo', '"It was the best of times"')
          extract_match('^([^\\s]+) was (.*) of',
            group_variables=['first_capture', 'second_capture', 'third_capture'])
          shell('/bin/echo', 'First: ', first_capture, 'Second:', second_capture,
            'Third:', third_capture)
          assert_contains('First: It Second: the best Third: None')
    - name: "yaml"
      spec:
      - shell:
        - /bin/echo "It was the best of times"
      - extract_match:
          pattern: ^([^\s]+) was (.*) of
          groups:
          - first_capture
          - second_capture
          - third_capture # not matched
      - shell:
        - /bin/echo
        - "First:"
        - first_capture
        - "Second:"
        - second_capture
        - "Third:"
        - third_capture
      - assert_contains:
        - literal: 'First: It Second: the best Third: None'
  - name: Failing, erroring extract_match (cannot use variable together with groups)
    cases:
    - name: "code"
      spec:
      - code: |
          shell('/bin/echo', '"It was the best of times"')
          extract_match('^([^\\s]+) was (.*) of', variable='my_variable'
            group_variables=['first_capture', 'second_capture', 'third_capture'])
          assert_success('if extract_match fails, this is not run')
    - name: "yaml"
      spec:
      - shell:
        - /bin/echo "It was the best of times"
      - extract_match:
          pattern: ^([^\s]+) was (.*) of
          variable: my_variable
          groups:
          - first_capture
          - second_capture
          - third_capture # not matched
      - assert_success:
        - if extract_match fails, this is not run
        
    
